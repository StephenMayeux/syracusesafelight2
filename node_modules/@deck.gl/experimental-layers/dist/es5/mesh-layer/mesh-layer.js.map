{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["fp64LowPart","fp64","RADIAN_PER_DEGREE","Math","PI","assert","condition","message","Error","getTexture","gl","src","opts","Object","assign","urls","then","textures","catch","error","Promise","resolve","getTextureFromData","data","Texture2D","validateGeometryAttributes","attributes","positions","normals","texCoords","getGeometry","Geometry","DEFAULT_COLOR","defaultProps","mesh","texture","sizeScale","parameters","depthTest","depthFunc","GL","LEQUAL","lightSettings","getPosition","x","position","getColor","color","getYaw","yaw","angle","getPitch","pitch","getRoll","roll","MeshLayer","projectModule","use64bitProjection","vs","fs","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","accessor","update","calculateInstancePositions","instancePositions64xy","calculateInstancePositions64xyLow","instanceRotations","calculateInstanceRotations","instanceColors","calculateInstanceColors","setState","emptyTexture","context","Uint8Array","width","height","props","oldProps","changeFlags","dataChanged","invalidateAll","_updateFP64","setTexture","state","model","delete","getModel","uniforms","render","Model","getShaders","id","geometry","isInstanced","shaderCache","setUniforms","sampler","hasTexture","attribute","value","i","point","isFP64","use64bitPositions","constant","Float32Array","isNaN","Layer","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, loadTextures, Texture2D, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nconst RADIAN_PER_DEGREE = Math.PI / 180;\n\n// Replacement for the external assert method to reduce bundle size\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadTextures(gl, Object.assign({urls: [src]}, opts))\n      .then(textures => textures[0])\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src, opts)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(attributes.positions && attributes.normals && attributes.texCoords);\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data instanceof Geometry) {\n    validateGeometryAttributes(data.attributes);\n    return data;\n  } else if (data.positions) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: null,\n  texture: null,\n  sizeScale: 1,\n\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {},\n\n  getPosition: x => x.position,\n  getColor: x => x.color || DEFAULT_COLOR,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  getYaw: x => x.yaw || x.angle || 0,\n  getPitch: x => x.pitch || 0,\n  getRoll: x => x.roll || 0\n};\n\nexport default class MeshLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions\n      },\n      instancePositions64xy: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceRotations: {\n        size: 3,\n        accessor: ['getYaw', 'getPitch', 'getRoll'],\n        update: this.calculateInstanceRotations\n      },\n      instanceColors: {size: 4, accessor: 'getColor', update: this.calculateInstanceColors}\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n\n    // super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.dataChanged) {\n      attributeManager.invalidateAll();\n    }\n\n    this._updateFP64(props, oldProps);\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n  }\n\n  _updateFP64(props, oldProps) {\n    if (props.fp64 !== oldProps.fp64) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n\n      this.setState({model: this.getModel(this.context.gl)});\n\n      this.setTexture(this.state.texture);\n\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        sizeScale\n      })\n    );\n  }\n\n  getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(this.props.mesh),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  setTexture(src) {\n    const {gl} = this.context;\n    const {model, emptyTexture} = this.state;\n\n    if (src) {\n      getTexture(gl, src).then(texture => {\n        model.setUniforms({sampler: texture, hasTexture: 1});\n        this.setState({texture});\n      });\n    } else {\n      // reset\n      this.state.model.setUniforms({sampler: emptyTexture, hasTexture: 0});\n      this.setState({texture: null});\n    }\n  }\n\n  calculateInstancePositions(attribute) {\n    const {data, getPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i] = position[0];\n      value[i + 1] = position[1];\n      value[i + 2] = position[2] || 0;\n      i += size;\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  // yaw(z), pitch(y) and roll(x) in radians\n  calculateInstanceRotations(attribute) {\n    const {data, getYaw, getPitch, getRoll} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const point of data) {\n      value[i++] = getRoll(point) * RADIAN_PER_DEGREE;\n      value[i++] = getPitch(point) * RADIAN_PER_DEGREE;\n      value[i++] = getYaw(point) * RADIAN_PER_DEGREE;\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const color = getColor(point) || DEFAULT_COLOR;\n      value[i++] = color[0];\n      value[i++] = color[1];\n      value[i++] = color[2];\n      value[i++] = isNaN(color[3]) ? 255 : color[3];\n    }\n  }\n}\n\nMeshLayer.layerName = 'MeshLayer';\nMeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}