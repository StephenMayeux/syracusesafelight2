{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["GeoJsonLayer","CompositeLayer","TileCache","defaultProps","renderSubLayers","props","getTileData","x","y","z","Promise","resolve","maxZoom","minZoom","maxCacheSize","TileLayer","initializeState","state","tiles","tileCache","isLoaded","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","context","updateTriggersChanged","all","finalize","setState","maxSize","viewportChanged","viewport","getLayerZoomLevel","id","update","currTiles","filter","tile","allCurrTilesLoaded","every","map","data","then","getPickingInfo","info","sourceLayer","Math","floor","zoom","parseInt","renderLayers","geoProps","visible","layerName"],"mappings":"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","sourcesContent":["import {GeoJsonLayer, CompositeLayer} from 'deck.gl';\nimport TileCache from './utils/tile-cache';\n\nconst defaultProps = {\n  renderSubLayers: props => new GeoJsonLayer(props),\n  getTileData: ({x, y, z}) => Promise.resolve(null),\n  maxZoom: null,\n  minZoom: null,\n  maxCacheSize: null\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    const {maxZoom, minZoom, getTileData} = this.props;\n    this.state = {\n      tiles: [],\n      tileCache: new TileCache({getTileData, maxZoom, minZoom}),\n      isLoaded: false\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData)\n    ) {\n      const {getTileData, maxZoom, minZoom, maxCacheSize} = props;\n      this.state.tileCache.finalize();\n      this.setState({\n        tileCache: new TileCache({getTileData, maxSize: maxCacheSize, maxZoom, minZoom})\n      });\n    }\n    if (changeFlags.viewportChanged) {\n      const {viewport} = context;\n      const z = this.getLayerZoomLevel();\n      if (viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {\n        this.state.tileCache.update(viewport, tiles => {\n          const currTiles = tiles.filter(tile => tile.z === z);\n          const allCurrTilesLoaded = currTiles.every(tile => tile.isLoaded);\n          this.setState({tiles, isLoaded: allCurrTilesLoaded});\n          if (!allCurrTilesLoaded) {\n            Promise.all(currTiles.map(tile => tile.data)).then(() =>\n              this.setState({isLoaded: true})\n            );\n          }\n        });\n      }\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  getLayerZoomLevel() {\n    const z = Math.floor(this.context.viewport.zoom);\n    const {maxZoom, minZoom} = this.props;\n    if (maxZoom && parseInt(maxZoom, 10) === maxZoom && z > maxZoom) {\n      return maxZoom;\n    } else if (minZoom && parseInt(minZoom, 10) === minZoom && z < minZoom) {\n      return minZoom;\n    }\n    return z;\n  }\n\n  renderLayers() {\n    // eslint-disable-next-line no-unused-vars\n    const {getTileData, renderSubLayers, ...geoProps} = this.props;\n    const z = this.getLayerZoomLevel();\n    return this.state.tiles.map(tile => {\n      return renderSubLayers({\n        ...geoProps,\n        id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n        data: tile.data,\n        visible: !this.state.isLoaded || tile.z === z,\n        tile\n      });\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}