{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["GeoJsonLayer","CompositeLayer","TileCache","defaultProps","renderSubLayers","props","getTileData","x","y","z","Promise","resolve","maxZoom","minZoom","maxCacheSize","TileLayer","state","tiles","tileCache","isLoaded","changeFlags","somethingChanged","oldProps","context","updateTriggersChanged","all","finalize","setState","maxSize","viewportChanged","viewport","getLayerZoomLevel","id","update","currTiles","filter","tile","allCurrTilesLoaded","every","map","data","then","info","sourceLayer","Math","floor","zoom","parseInt","geoProps","visible","layerName"],"mappings":"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","sourcesContent":["import {GeoJsonLayer, CompositeLayer} from 'deck.gl';\nimport TileCache from './utils/tile-cache';\n\nconst defaultProps = {\n  renderSubLayers: props => new GeoJsonLayer(props),\n  getTileData: ({x, y, z}) => Promise.resolve(null),\n  maxZoom: null,\n  minZoom: null,\n  maxCacheSize: null\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    const {maxZoom, minZoom, getTileData} = this.props;\n    this.state = {\n      tiles: [],\n      tileCache: new TileCache({getTileData, maxZoom, minZoom}),\n      isLoaded: false\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData)\n    ) {\n      const {getTileData, maxZoom, minZoom, maxCacheSize} = props;\n      this.state.tileCache.finalize();\n      this.setState({\n        tileCache: new TileCache({getTileData, maxSize: maxCacheSize, maxZoom, minZoom})\n      });\n    }\n    if (changeFlags.viewportChanged) {\n      const {viewport} = context;\n      const z = this.getLayerZoomLevel();\n      if (viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {\n        this.state.tileCache.update(viewport, tiles => {\n          const currTiles = tiles.filter(tile => tile.z === z);\n          const allCurrTilesLoaded = currTiles.every(tile => tile.isLoaded);\n          this.setState({tiles, isLoaded: allCurrTilesLoaded});\n          if (!allCurrTilesLoaded) {\n            Promise.all(currTiles.map(tile => tile.data)).then(() =>\n              this.setState({isLoaded: true})\n            );\n          }\n        });\n      }\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  getLayerZoomLevel() {\n    const z = Math.floor(this.context.viewport.zoom);\n    const {maxZoom, minZoom} = this.props;\n    if (maxZoom && parseInt(maxZoom, 10) === maxZoom && z > maxZoom) {\n      return maxZoom;\n    } else if (minZoom && parseInt(minZoom, 10) === minZoom && z < minZoom) {\n      return minZoom;\n    }\n    return z;\n  }\n\n  renderLayers() {\n    // eslint-disable-next-line no-unused-vars\n    const {getTileData, renderSubLayers, ...geoProps} = this.props;\n    const z = this.getLayerZoomLevel();\n    return this.state.tiles.map(tile => {\n      return renderSubLayers({\n        ...geoProps,\n        id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n        data: tile.data,\n        visible: !this.state.isLoaded || tile.z === z,\n        tile\n      });\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}