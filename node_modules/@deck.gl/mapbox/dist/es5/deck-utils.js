"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeckInstance = getDeckInstance;
exports.addLayer = addLayer;
exports.removeLayer = removeLayer;
exports.updateLayer = updateLayer;
exports.drawLayer = drawLayer;
exports.getViewState = getViewState;

var _core = require("@deck.gl/core");

function getDeckInstance(_ref) {
  var map = _ref.map,
      gl = _ref.gl,
      deck = _ref.deck;

  // Only create one deck instance per context
  if (map.__deck) {
    return map.__deck;
  }

  var deckProps = {
    gl: gl,
    width: '100%',
    height: '100%',
    useDevicePixels: true,
    _customRender: function _customRender() {
      return map.triggerRepaint();
    },
    parameters: {
      depthMask: true,
      depthTest: true
    },
    userData: {
      isExternal: false,
      mapboxLayers: new Set()
    }
  };

  if (deck) {
    deck.setProps(deckProps);
    deck.props.userData.isExternal = true;
  } else {
    deck = new _core.Deck(deckProps);
    map.on('remove', function () {
      deck.finalize();
      map.__deck = null;
    });
  }

  map.__deck = deck;
  map.on('render', function () {
    return afterRender(deck, map);
  });
  initEvents(map, deck);
  return deck;
}

function addLayer(deck, layer) {
  deck.props.userData.mapboxLayers.add(layer);
  updateLayers(deck);
}

function removeLayer(deck, layer) {
  deck.props.userData.mapboxLayers.delete(layer);
  updateLayers(deck);
}

function updateLayer(deck, layer) {
  updateLayers(deck);
}

function drawLayer(deck, layer) {
  // set layerFilter to only allow the current layer
  deck.layerManager.layerFilter = function (params) {
    return shouldDrawLayer(layer.id, params.layer);
  };

  deck._drawLayers('mapbox-repaint');
}

function getViewState(map, extraProps) {
  var _map$getCenter = map.getCenter(),
      lng = _map$getCenter.lng,
      lat = _map$getCenter.lat;

  return Object.assign({
    longitude: lng,
    latitude: lat,
    zoom: map.getZoom(),
    bearing: map.getBearing(),
    pitch: map.getPitch()
  }, extraProps);
}

function afterRender(deck, map) {
  var _deck$props$userData = deck.props.userData,
      mapboxLayers = _deck$props$userData.mapboxLayers,
      isExternal = _deck$props$userData.isExternal;

  if (isExternal) {
    // Update viewState
    var viewState = getViewState(map, {
      nearZMultiplier: 0.1,
      farZMultiplier: 10
    });
    deck.setProps({
      viewState: viewState
    }); // Draw non-Mapbox layers

    var mapboxLayerIds = Array.from(mapboxLayers, function (layer) {
      return layer.id;
    });

    deck.layerManager.layerFilter = function (params) {
      for (var _i = 0; _i < mapboxLayerIds.length; _i++) {
        var id = mapboxLayerIds[_i];

        if (shouldDrawLayer(id, params.layer)) {
          return false;
        }
      }

      return true;
    };

    deck._drawLayers('mapbox-repaint');
  }

  deck.needsRedraw({
    clearRedrawFlags: true
  });
}

function shouldDrawLayer(id, layer) {
  var layerInstance = layer;

  while (layerInstance) {
    if (layerInstance.id === id) {
      return true;
    }

    layerInstance = layerInstance.parent;
  }

  return false;
}

function updateLayers(deck) {
  if (deck.props.userData.isExternal) {
    return;
  }

  var layers = [];
  deck.props.userData.mapboxLayers.forEach(function (deckLayer) {
    var LayerType = deckLayer.props.type;
    var layer = new LayerType(deckLayer.props);
    layers.push(layer);
  });
  deck.setProps({
    layers: layers
  });
} // Triggers picking on a mouse event


function handleMouseEvent(deck, event) {
  // reset layerFilter to allow all layers during picking
  deck.layerManager.layerFilter = null;
  var callback;

  switch (event.type) {
    case 'click':
      callback = deck._onClick;
      break;

    case 'mousemove':
    case 'pointermove':
      callback = deck._onPointerMove;
      break;

    case 'mouseleave':
    case 'pointerleave':
      callback = deck._onPointerLeave;
      break;

    default:
      return;
  }

  if (!event.offsetCenter) {
    // Map from mapbox's MapMouseEvent object to mjolnir.js' Event object
    event = {
      offsetCenter: event.point,
      srcEvent: event.originalEvent
    };
  }

  callback(event);
} // Register deck callbacks for pointer events


function initEvents(map, deck) {
  var pickingEventHandler = function pickingEventHandler(event) {
    return handleMouseEvent(deck, event);
  };

  if (deck.eventManager) {
    // Replace default event handlers with our own ones
    deck.eventManager.off({
      click: deck._onClick,
      pointermove: deck._onPointerMove,
      pointerleave: deck._onPointerLeave
    });
    deck.eventManager.on({
      click: pickingEventHandler,
      pointermove: pickingEventHandler,
      pointerleave: pickingEventHandler
    });
  } else {
    map.on('click', pickingEventHandler);
    map.on('mousemove', pickingEventHandler);
    map.on('mouseleave', pickingEventHandler);
  }
}
//# sourceMappingURL=deck-utils.js.map