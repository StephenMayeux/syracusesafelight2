{"version":3,"sources":["../../src/deck-utils.js"],"names":["getDeckInstance","map","gl","deck","__deck","deckProps","width","height","useDevicePixels","_customRender","triggerRepaint","parameters","depthMask","depthTest","userData","isExternal","mapboxLayers","Set","setProps","props","Deck","on","finalize","afterRender","initEvents","addLayer","layer","add","updateLayers","removeLayer","delete","updateLayer","drawLayer","layerManager","layerFilter","params","shouldDrawLayer","id","_drawLayers","getViewState","extraProps","getCenter","lng","lat","Object","assign","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","viewState","nearZMultiplier","farZMultiplier","mapboxLayerIds","Array","from","needsRedraw","clearRedrawFlags","layerInstance","parent","layers","forEach","deckLayer","LayerType","type","push","handleMouseEvent","event","callback","_onClick","_onPointerMove","_onPointerLeave","offsetCenter","point","srcEvent","originalEvent","pickingEventHandler","eventManager","off","click","pointermove","pointerleave"],"mappings":"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","sourcesContent":["import {Deck} from '@deck.gl/core';\n\nexport function getDeckInstance({map, gl, deck}) {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const deckProps = {\n    gl,\n    width: '100%',\n    height: '100%',\n    useDevicePixels: true,\n    _customRender: () => map.triggerRepaint(),\n    parameters: {\n      depthMask: true,\n      depthTest: true\n    },\n    userData: {\n      isExternal: false,\n      mapboxLayers: new Set()\n    }\n  };\n\n  if (deck) {\n    deck.setProps(deckProps);\n    deck.props.userData.isExternal = true;\n  } else {\n    deck = new Deck(deckProps);\n\n    map.on('remove', () => {\n      deck.finalize();\n      map.__deck = null;\n    });\n  }\n  map.__deck = deck;\n  map.on('render', () => afterRender(deck, map));\n\n  initEvents(map, deck);\n\n  return deck;\n}\n\nexport function addLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck, layer) {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck, layer) {\n  // set layerFilter to only allow the current layer\n  deck.layerManager.layerFilter = params => shouldDrawLayer(layer.id, params.layer);\n  deck._drawLayers('mapbox-repaint');\n}\n\nexport function getViewState(map, extraProps) {\n  const {lng, lat} = map.getCenter();\n  return Object.assign(\n    {\n      longitude: lng,\n      latitude: lat,\n      zoom: map.getZoom(),\n      bearing: map.getBearing(),\n      pitch: map.getPitch()\n    },\n    extraProps\n  );\n}\n\nfunction afterRender(deck, map) {\n  const {mapboxLayers, isExternal} = deck.props.userData;\n\n  if (isExternal) {\n    // Update viewState\n    const viewState = getViewState(map, {\n      nearZMultiplier: 0.1,\n      farZMultiplier: 10\n    });\n    deck.setProps({viewState});\n\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    deck.layerManager.layerFilter = params => {\n      for (const id of mapboxLayerIds) {\n        if (shouldDrawLayer(id, params.layer)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    deck._drawLayers('mapbox-repaint');\n  }\n\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction shouldDrawLayer(id, layer) {\n  let layerInstance = layer;\n  while (layerInstance) {\n    if (layerInstance.id === id) {\n      return true;\n    }\n    layerInstance = layerInstance.parent;\n  }\n  return false;\n}\n\nfunction updateLayers(deck) {\n  if (deck.props.userData.isExternal) {\n    return;\n  }\n\n  const layers = [];\n  deck.props.userData.mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n\n// Triggers picking on a mouse event\nfunction handleMouseEvent(deck, event) {\n  // reset layerFilter to allow all layers during picking\n  deck.layerManager.layerFilter = null;\n\n  let callback;\n  switch (event.type) {\n    case 'click':\n      callback = deck._onClick;\n      break;\n\n    case 'mousemove':\n    case 'pointermove':\n      callback = deck._onPointerMove;\n      break;\n\n    case 'mouseleave':\n    case 'pointerleave':\n      callback = deck._onPointerLeave;\n      break;\n\n    default:\n      return;\n  }\n\n  if (!event.offsetCenter) {\n    // Map from mapbox's MapMouseEvent object to mjolnir.js' Event object\n    event = {\n      offsetCenter: event.point,\n      srcEvent: event.originalEvent\n    };\n  }\n  callback(event);\n}\n\n// Register deck callbacks for pointer events\nfunction initEvents(map, deck) {\n  const pickingEventHandler = event => handleMouseEvent(deck, event);\n\n  if (deck.eventManager) {\n    // Replace default event handlers with our own ones\n    deck.eventManager.off({\n      click: deck._onClick,\n      pointermove: deck._onPointerMove,\n      pointerleave: deck._onPointerLeave\n    });\n    deck.eventManager.on({\n      click: pickingEventHandler,\n      pointermove: pickingEventHandler,\n      pointerleave: pickingEventHandler\n    });\n  } else {\n    map.on('click', pickingEventHandler);\n    map.on('mousemove', pickingEventHandler);\n    map.on('mouseleave', pickingEventHandler);\n  }\n}\n"],"file":"deck-utils.js"}