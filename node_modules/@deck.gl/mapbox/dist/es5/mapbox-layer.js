"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deckUtils = require("./deck-utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MapboxLayer =
/*#__PURE__*/
function () {
  /* eslint-disable no-this-before-super */
  function MapboxLayer(props) {
    _classCallCheck(this, MapboxLayer);

    if (!props.id) {
      throw new Error('Layer must have an unique id');
    }

    this.id = props.id;
    this.type = 'custom';
    this.renderingMode = props.renderingMode || '3d';
    this.map = null;
    this.deck = null;
    this.props = props;
  }
  /* Mapbox custom layer methods */


  _createClass(MapboxLayer, [{
    key: "onAdd",
    value: function onAdd(map, gl) {
      this.map = map;
      this.deck = (0, _deckUtils.getDeckInstance)({
        map: map,
        gl: gl,
        deck: this.props.deck
      });
      (0, _deckUtils.addLayer)(this.deck, this);
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      (0, _deckUtils.removeLayer)(this.deck, this);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      // id cannot be changed
      Object.assign(this.props, props, {
        id: this.id
      }); // safe guard in case setProps is called before onAdd

      if (this.deck) {
        (0, _deckUtils.updateLayer)(this.deck, this);
      }
    }
  }, {
    key: "render",
    value: function render(gl, matrix) {
      this.deck.setProps({
        viewState: this._getViewState()
      });
      (0, _deckUtils.drawLayer)(this.deck, this);
    }
    /* Private API */

  }, {
    key: "_getViewState",
    value: function _getViewState() {
      var map = this.map,
          deck = this.deck;
      return (0, _deckUtils.getViewState)(map, {
        nearZMultiplier: deck.height ? 1 / deck.height : 1,
        farZMultiplier: 1
      });
    }
  }]);

  return MapboxLayer;
}();

exports.default = MapboxLayer;
//# sourceMappingURL=mapbox-layer.js.map